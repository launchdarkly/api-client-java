/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.launchdarkly.api.api;

import com.launchdarkly.api.ApiException;
import com.launchdarkly.api.model.Environment;
import com.launchdarkly.api.model.EnvironmentPost;
import com.launchdarkly.api.model.PatchOperation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnvironmentsApi
 */
@Ignore
public class EnvironmentsApiTest {

    private final EnvironmentsApi api = new EnvironmentsApi();

    
    /**
     * Delete an environment in a specific project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEnvironmentTest() throws ApiException {
        String projectKey = null;
        String environmentKey = null;
        api.deleteEnvironment(projectKey, environmentKey);

        // TODO: test validations
    }
    
    /**
     * Get an environment given a project and key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvironmentTest() throws ApiException {
        String projectKey = null;
        String environmentKey = null;
        Environment response = api.getEnvironment(projectKey, environmentKey);

        // TODO: test validations
    }
    
    /**
     * Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchEnvironmentTest() throws ApiException {
        String projectKey = null;
        String environmentKey = null;
        List<PatchOperation> patchDelta = null;
        Environment response = api.patchEnvironment(projectKey, environmentKey, patchDelta);

        // TODO: test validations
    }
    
    /**
     * Create a new environment in a specified project with a given name, key, and swatch color.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postEnvironmentTest() throws ApiException {
        String projectKey = null;
        EnvironmentPost environmentBody = null;
        Environment response = api.postEnvironment(projectKey, environmentBody);

        // TODO: test validations
    }
    
    /**
     * Reset an environment&#39;s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetEnvironmentMobileKeyTest() throws ApiException {
        String projectKey = null;
        String environmentKey = null;
        Long expiry = null;
        Environment response = api.resetEnvironmentMobileKey(projectKey, environmentKey, expiry);

        // TODO: test validations
    }
    
    /**
     * Reset an environment&#39;s SDK key with an optional expiry time for the old key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetEnvironmentSDKKeyTest() throws ApiException {
        String projectKey = null;
        String environmentKey = null;
        Long expiry = null;
        Environment response = api.resetEnvironmentSDKKey(projectKey, environmentKey, expiry);

        // TODO: test validations
    }
    
}
